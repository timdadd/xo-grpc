// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package employee_territory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	typespb "northwind/proto/typespb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeTerritoryClient is the client API for EmployeeTerritory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeTerritoryClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Employee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*typespb.Employee, error)
	EmployeeTerritoryByEmployeeIDTerritoryID(ctx context.Context, in *EmployeeTerritoryByEmployeeIDTerritoryIDRequest, opts ...grpc.CallOption) (*typespb.EmployeeTerritory, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Territory(ctx context.Context, in *TerritoryRequest, opts ...grpc.CallOption) (*typespb.Territory, error)
}

type employeeTerritoryClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeTerritoryClient(cc grpc.ClientConnInterface) EmployeeTerritoryClient {
	return &employeeTerritoryClient{cc}
}

func (c *employeeTerritoryClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/employee_territory.EmployeeTerritory/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeTerritoryClient) Employee(ctx context.Context, in *EmployeeRequest, opts ...grpc.CallOption) (*typespb.Employee, error) {
	out := new(typespb.Employee)
	err := c.cc.Invoke(ctx, "/employee_territory.EmployeeTerritory/Employee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeTerritoryClient) EmployeeTerritoryByEmployeeIDTerritoryID(ctx context.Context, in *EmployeeTerritoryByEmployeeIDTerritoryIDRequest, opts ...grpc.CallOption) (*typespb.EmployeeTerritory, error) {
	out := new(typespb.EmployeeTerritory)
	err := c.cc.Invoke(ctx, "/employee_territory.EmployeeTerritory/EmployeeTerritoryByEmployeeIDTerritoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeTerritoryClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/employee_territory.EmployeeTerritory/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeTerritoryClient) Territory(ctx context.Context, in *TerritoryRequest, opts ...grpc.CallOption) (*typespb.Territory, error) {
	out := new(typespb.Territory)
	err := c.cc.Invoke(ctx, "/employee_territory.EmployeeTerritory/Territory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeTerritoryServer is the server API for EmployeeTerritory service.
// All implementations must embed UnimplementedEmployeeTerritoryServer
// for forward compatibility
type EmployeeTerritoryServer interface {
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Employee(context.Context, *EmployeeRequest) (*typespb.Employee, error)
	EmployeeTerritoryByEmployeeIDTerritoryID(context.Context, *EmployeeTerritoryByEmployeeIDTerritoryIDRequest) (*typespb.EmployeeTerritory, error)
	Insert(context.Context, *InsertRequest) (*emptypb.Empty, error)
	Territory(context.Context, *TerritoryRequest) (*typespb.Territory, error)
	mustEmbedUnimplementedEmployeeTerritoryServer()
}

// UnimplementedEmployeeTerritoryServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeTerritoryServer struct {
}

func (UnimplementedEmployeeTerritoryServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEmployeeTerritoryServer) Employee(context.Context, *EmployeeRequest) (*typespb.Employee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Employee not implemented")
}
func (UnimplementedEmployeeTerritoryServer) EmployeeTerritoryByEmployeeIDTerritoryID(context.Context, *EmployeeTerritoryByEmployeeIDTerritoryIDRequest) (*typespb.EmployeeTerritory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmployeeTerritoryByEmployeeIDTerritoryID not implemented")
}
func (UnimplementedEmployeeTerritoryServer) Insert(context.Context, *InsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedEmployeeTerritoryServer) Territory(context.Context, *TerritoryRequest) (*typespb.Territory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Territory not implemented")
}
func (UnimplementedEmployeeTerritoryServer) mustEmbedUnimplementedEmployeeTerritoryServer() {}

// UnsafeEmployeeTerritoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeTerritoryServer will
// result in compilation errors.
type UnsafeEmployeeTerritoryServer interface {
	mustEmbedUnimplementedEmployeeTerritoryServer()
}

func RegisterEmployeeTerritoryServer(s grpc.ServiceRegistrar, srv EmployeeTerritoryServer) {
	s.RegisterService(&EmployeeTerritory_ServiceDesc, srv)
}

func _EmployeeTerritory_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTerritoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_territory.EmployeeTerritory/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTerritoryServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeTerritory_Employee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTerritoryServer).Employee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_territory.EmployeeTerritory/Employee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTerritoryServer).Employee(ctx, req.(*EmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeTerritory_EmployeeTerritoryByEmployeeIDTerritoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeTerritoryByEmployeeIDTerritoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTerritoryServer).EmployeeTerritoryByEmployeeIDTerritoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_territory.EmployeeTerritory/EmployeeTerritoryByEmployeeIDTerritoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTerritoryServer).EmployeeTerritoryByEmployeeIDTerritoryID(ctx, req.(*EmployeeTerritoryByEmployeeIDTerritoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeTerritory_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTerritoryServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_territory.EmployeeTerritory/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTerritoryServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeTerritory_Territory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerritoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeTerritoryServer).Territory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/employee_territory.EmployeeTerritory/Territory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeTerritoryServer).Territory(ctx, req.(*TerritoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeTerritory_ServiceDesc is the grpc.ServiceDesc for EmployeeTerritory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeTerritory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "employee_territory.EmployeeTerritory",
	HandlerType: (*EmployeeTerritoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _EmployeeTerritory_Delete_Handler,
		},
		{
			MethodName: "Employee",
			Handler:    _EmployeeTerritory_Employee_Handler,
		},
		{
			MethodName: "EmployeeTerritoryByEmployeeIDTerritoryID",
			Handler:    _EmployeeTerritory_EmployeeTerritoryByEmployeeIDTerritoryID_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _EmployeeTerritory_Insert_Handler,
		},
		{
			MethodName: "Territory",
			Handler:    _EmployeeTerritory_Territory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "employee_territory.proto",
}
