// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shipper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	typespb "northwind/proto/typespb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShipperClient is the client API for Shipper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipperClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ShipperByShipperID(ctx context.Context, in *ShipperByShipperIDRequest, opts ...grpc.CallOption) (*typespb.Shipper, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type shipperClient struct {
	cc grpc.ClientConnInterface
}

func NewShipperClient(cc grpc.ClientConnInterface) ShipperClient {
	return &shipperClient{cc}
}

func (c *shipperClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shipper.Shipper/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shipper.Shipper/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperClient) ShipperByShipperID(ctx context.Context, in *ShipperByShipperIDRequest, opts ...grpc.CallOption) (*typespb.Shipper, error) {
	out := new(typespb.Shipper)
	err := c.cc.Invoke(ctx, "/shipper.Shipper/ShipperByShipperID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shipper.Shipper/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipperClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/shipper.Shipper/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipperServer is the server API for Shipper service.
// All implementations must embed UnimplementedShipperServer
// for forward compatibility
type ShipperServer interface {
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Insert(context.Context, *InsertRequest) (*emptypb.Empty, error)
	ShipperByShipperID(context.Context, *ShipperByShipperIDRequest) (*typespb.Shipper, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedShipperServer()
}

// UnimplementedShipperServer must be embedded to have forward compatible implementations.
type UnimplementedShipperServer struct {
}

func (UnimplementedShipperServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedShipperServer) Insert(context.Context, *InsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedShipperServer) ShipperByShipperID(context.Context, *ShipperByShipperIDRequest) (*typespb.Shipper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipperByShipperID not implemented")
}
func (UnimplementedShipperServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedShipperServer) Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedShipperServer) mustEmbedUnimplementedShipperServer() {}

// UnsafeShipperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipperServer will
// result in compilation errors.
type UnsafeShipperServer interface {
	mustEmbedUnimplementedShipperServer()
}

func RegisterShipperServer(s grpc.ServiceRegistrar, srv ShipperServer) {
	s.RegisterService(&Shipper_ServiceDesc, srv)
}

func _Shipper_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipperServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipper.Shipper/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipperServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipper_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipperServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipper.Shipper/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipperServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipper_ShipperByShipperID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipperByShipperIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipperServer).ShipperByShipperID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipper.Shipper/ShipperByShipperID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipperServer).ShipperByShipperID(ctx, req.(*ShipperByShipperIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipper_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipperServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipper.Shipper/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipperServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shipper_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipperServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shipper.Shipper/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipperServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shipper_ServiceDesc is the grpc.ServiceDesc for Shipper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shipper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipper.Shipper",
	HandlerType: (*ShipperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Shipper_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Shipper_Insert_Handler,
		},
		{
			MethodName: "ShipperByShipperID",
			Handler:    _Shipper_ShipperByShipperID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Shipper_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Shipper_Upsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipper.proto",
}
