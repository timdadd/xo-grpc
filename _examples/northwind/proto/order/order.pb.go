// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.3
// source: order.proto

package order

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	typespb "northwind/proto/typespb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"`
}

func (x *CustomerRequest) Reset() {
	*x = CustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerRequest) ProtoMessage() {}

func (x *CustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerRequest.ProtoReflect.Descriptor instead.
func (*CustomerRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *CustomerRequest) GetCustomerID() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerID
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int32 `protobuf:"varint,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteRequest) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

type EmployeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmployeeID *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=EmployeeID,proto3" json:"EmployeeID,omitempty"`
}

func (x *EmployeeRequest) Reset() {
	*x = EmployeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmployeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeeRequest) ProtoMessage() {}

func (x *EmployeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeeRequest.ProtoReflect.Descriptor instead.
func (*EmployeeRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *EmployeeRequest) GetEmployeeID() *wrapperspb.Int64Value {
	if x != nil {
		return x.EmployeeID
	}
	return nil
}

type InsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"`
	EmployeeID     *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=EmployeeID,proto3" json:"EmployeeID,omitempty"`
	Freight        *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=Freight,proto3" json:"Freight,omitempty"`
	OrderDate      *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=OrderDate,proto3" json:"OrderDate,omitempty"`
	OrderID        int32                   `protobuf:"varint,5,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	RequiredDate   *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=RequiredDate,proto3" json:"RequiredDate,omitempty"`
	ShipAddress    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ShipAddress,proto3" json:"ShipAddress,omitempty"`
	ShipCity       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=ShipCity,proto3" json:"ShipCity,omitempty"`
	ShipCountry    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ShipCountry,proto3" json:"ShipCountry,omitempty"`
	ShipName       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=ShipName,proto3" json:"ShipName,omitempty"`
	ShipPostalCode *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=ShipPostalCode,proto3" json:"ShipPostalCode,omitempty"`
	ShipRegion     *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=ShipRegion,proto3" json:"ShipRegion,omitempty"`
	ShipVia        *wrapperspb.Int64Value  `protobuf:"bytes,13,opt,name=ShipVia,proto3" json:"ShipVia,omitempty"`
	ShippedDate    *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=ShippedDate,proto3" json:"ShippedDate,omitempty"`
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

func (x *InsertRequest) GetCustomerID() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerID
	}
	return nil
}

func (x *InsertRequest) GetEmployeeID() *wrapperspb.Int64Value {
	if x != nil {
		return x.EmployeeID
	}
	return nil
}

func (x *InsertRequest) GetFreight() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Freight
	}
	return nil
}

func (x *InsertRequest) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *InsertRequest) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *InsertRequest) GetRequiredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequiredDate
	}
	return nil
}

func (x *InsertRequest) GetShipAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipAddress
	}
	return nil
}

func (x *InsertRequest) GetShipCity() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipCity
	}
	return nil
}

func (x *InsertRequest) GetShipCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipCountry
	}
	return nil
}

func (x *InsertRequest) GetShipName() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipName
	}
	return nil
}

func (x *InsertRequest) GetShipPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipPostalCode
	}
	return nil
}

func (x *InsertRequest) GetShipRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipRegion
	}
	return nil
}

func (x *InsertRequest) GetShipVia() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShipVia
	}
	return nil
}

func (x *InsertRequest) GetShippedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ShippedDate
	}
	return nil
}

type OrderByOrderIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID int32 `protobuf:"varint,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
}

func (x *OrderByOrderIDRequest) Reset() {
	*x = OrderByOrderIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderByOrderIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderByOrderIDRequest) ProtoMessage() {}

func (x *OrderByOrderIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderByOrderIDRequest.ProtoReflect.Descriptor instead.
func (*OrderByOrderIDRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

func (x *OrderByOrderIDRequest) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

type ShipperRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShipVia *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=ShipVia,proto3" json:"ShipVia,omitempty"`
}

func (x *ShipperRequest) Reset() {
	*x = ShipperRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShipperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShipperRequest) ProtoMessage() {}

func (x *ShipperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShipperRequest.ProtoReflect.Descriptor instead.
func (*ShipperRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

func (x *ShipperRequest) GetShipVia() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShipVia
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"`
	EmployeeID *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=EmployeeID,proto3" json:"EmployeeID,omitempty"`
	Freight    *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=Freight,proto3" json:"Freight,omitempty"`
	OrderDate  *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=OrderDate,proto3" json:"OrderDate,omitempty"`
	// Output only.
	OrderID        int32                   `protobuf:"varint,5,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	RequiredDate   *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=RequiredDate,proto3" json:"RequiredDate,omitempty"`
	ShipAddress    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ShipAddress,proto3" json:"ShipAddress,omitempty"`
	ShipCity       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=ShipCity,proto3" json:"ShipCity,omitempty"`
	ShipCountry    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ShipCountry,proto3" json:"ShipCountry,omitempty"`
	ShipName       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=ShipName,proto3" json:"ShipName,omitempty"`
	ShipPostalCode *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=ShipPostalCode,proto3" json:"ShipPostalCode,omitempty"`
	ShipRegion     *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=ShipRegion,proto3" json:"ShipRegion,omitempty"`
	ShipVia        *wrapperspb.Int64Value  `protobuf:"bytes,13,opt,name=ShipVia,proto3" json:"ShipVia,omitempty"`
	ShippedDate    *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=ShippedDate,proto3" json:"ShippedDate,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRequest) GetCustomerID() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerID
	}
	return nil
}

func (x *UpdateRequest) GetEmployeeID() *wrapperspb.Int64Value {
	if x != nil {
		return x.EmployeeID
	}
	return nil
}

func (x *UpdateRequest) GetFreight() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Freight
	}
	return nil
}

func (x *UpdateRequest) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *UpdateRequest) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *UpdateRequest) GetRequiredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequiredDate
	}
	return nil
}

func (x *UpdateRequest) GetShipAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipAddress
	}
	return nil
}

func (x *UpdateRequest) GetShipCity() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipCity
	}
	return nil
}

func (x *UpdateRequest) GetShipCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipCountry
	}
	return nil
}

func (x *UpdateRequest) GetShipName() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipName
	}
	return nil
}

func (x *UpdateRequest) GetShipPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipPostalCode
	}
	return nil
}

func (x *UpdateRequest) GetShipRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipRegion
	}
	return nil
}

func (x *UpdateRequest) GetShipVia() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShipVia
	}
	return nil
}

func (x *UpdateRequest) GetShippedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ShippedDate
	}
	return nil
}

type UpsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID     *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=CustomerID,proto3" json:"CustomerID,omitempty"`
	EmployeeID     *wrapperspb.Int64Value  `protobuf:"bytes,2,opt,name=EmployeeID,proto3" json:"EmployeeID,omitempty"`
	Freight        *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=Freight,proto3" json:"Freight,omitempty"`
	OrderDate      *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=OrderDate,proto3" json:"OrderDate,omitempty"`
	OrderID        int32                   `protobuf:"varint,5,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	RequiredDate   *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=RequiredDate,proto3" json:"RequiredDate,omitempty"`
	ShipAddress    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ShipAddress,proto3" json:"ShipAddress,omitempty"`
	ShipCity       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=ShipCity,proto3" json:"ShipCity,omitempty"`
	ShipCountry    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ShipCountry,proto3" json:"ShipCountry,omitempty"`
	ShipName       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=ShipName,proto3" json:"ShipName,omitempty"`
	ShipPostalCode *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=ShipPostalCode,proto3" json:"ShipPostalCode,omitempty"`
	ShipRegion     *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=ShipRegion,proto3" json:"ShipRegion,omitempty"`
	ShipVia        *wrapperspb.Int64Value  `protobuf:"bytes,13,opt,name=ShipVia,proto3" json:"ShipVia,omitempty"`
	ShippedDate    *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=ShippedDate,proto3" json:"ShippedDate,omitempty"`
}

func (x *UpsertRequest) Reset() {
	*x = UpsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRequest) ProtoMessage() {}

func (x *UpsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRequest.ProtoReflect.Descriptor instead.
func (*UpsertRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{7}
}

func (x *UpsertRequest) GetCustomerID() *wrapperspb.StringValue {
	if x != nil {
		return x.CustomerID
	}
	return nil
}

func (x *UpsertRequest) GetEmployeeID() *wrapperspb.Int64Value {
	if x != nil {
		return x.EmployeeID
	}
	return nil
}

func (x *UpsertRequest) GetFreight() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Freight
	}
	return nil
}

func (x *UpsertRequest) GetOrderDate() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDate
	}
	return nil
}

func (x *UpsertRequest) GetOrderID() int32 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *UpsertRequest) GetRequiredDate() *timestamppb.Timestamp {
	if x != nil {
		return x.RequiredDate
	}
	return nil
}

func (x *UpsertRequest) GetShipAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipAddress
	}
	return nil
}

func (x *UpsertRequest) GetShipCity() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipCity
	}
	return nil
}

func (x *UpsertRequest) GetShipCountry() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipCountry
	}
	return nil
}

func (x *UpsertRequest) GetShipName() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipName
	}
	return nil
}

func (x *UpsertRequest) GetShipPostalCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipPostalCode
	}
	return nil
}

func (x *UpsertRequest) GetShipRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.ShipRegion
	}
	return nil
}

func (x *UpsertRequest) GetShipVia() *wrapperspb.Int64Value {
	if x != nil {
		return x.ShipVia
	}
	return nil
}

func (x *UpsertRequest) GetShippedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ShippedDate
	}
	return nil
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4f, 0x0a, 0x0f, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x29, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x0f, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x22, 0xc3, 0x06, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x43, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x53, 0x68, 0x69, 0x70, 0x43, 0x69, 0x74, 0x79, 0x12, 0x3e,
	0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38,
	0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x53, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70,
	0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x53, 0x68, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c,
	0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07,
	0x53, 0x68, 0x69, 0x70, 0x56, 0x69, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x53, 0x68, 0x69, 0x70,
	0x56, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x31, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x70, 0x56, 0x69,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x53, 0x68, 0x69, 0x70, 0x56, 0x69, 0x61, 0x22, 0xc3, 0x06,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3b, 0x0a,
	0x0a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x07, 0x46, 0x72,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x46, 0x72, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x43, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x53, 0x68, 0x69, 0x70, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x53, 0x68,
	0x69, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3c, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x53, 0x68, 0x69, 0x70, 0x56, 0x69, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x53, 0x68,
	0x69, 0x70, 0x56, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xc3, 0x06, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x46, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x53, 0x68, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x53, 0x68, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x53, 0x68, 0x69, 0x70, 0x43, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x53, 0x68,
	0x69, 0x70, 0x43, 0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x53, 0x68, 0x69, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x53, 0x68, 0x69, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x53, 0x68, 0x69, 0x70, 0x50, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x70, 0x56, 0x69, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x53, 0x68, 0x69, 0x70, 0x56, 0x69, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x53,
	0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x32, 0xcd, 0x05, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12,
	0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x70,
	0x62, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x7b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x12, 0x53, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0x5e, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x12, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x2f, 0x7b, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x4c, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x12, 0x57, 0x0a, 0x07, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12, 0x15,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x70, 0x62, 0x2e,
	0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x72, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x68, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x2f, 0x7b, 0x53, 0x68, 0x69, 0x70, 0x56, 0x69, 0x61, 0x7d, 0x12, 0x56, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x53, 0x0a, 0x06, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x14,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x75, 0x70, 0x73, 0x65, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x8e, 0x02, 0x5a, 0x15, 0x6e, 0x6f,
	0x72, 0x74, 0x68, 0x77, 0x69, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x92, 0x41, 0xf3, 0x01, 0x12, 0xf0, 0x01, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x74,
	0x68, 0x77, 0x69, 0x6e, 0x64, 0x12, 0x93, 0x01, 0x42, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x78, 0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x20, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72,
	0x75, 0x6e, 0x20, 0x27, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x2e, 0x73, 0x68, 0x27, 0x20,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x20,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x22, 0x48, 0x0a, 0x1a, 0x78,
	0x6f, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x20, 0x2d, 0x20, 0x57, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x20,
	0x57, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x65, 0x79, 0x12, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x77, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x65, 0x79, 0x2f, 0x78, 0x6f,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_order_proto_goTypes = []interface{}{
	(*CustomerRequest)(nil),        // 0: order.CustomerRequest
	(*DeleteRequest)(nil),          // 1: order.DeleteRequest
	(*EmployeeRequest)(nil),        // 2: order.EmployeeRequest
	(*InsertRequest)(nil),          // 3: order.InsertRequest
	(*OrderByOrderIDRequest)(nil),  // 4: order.OrderByOrderIDRequest
	(*ShipperRequest)(nil),         // 5: order.ShipperRequest
	(*UpdateRequest)(nil),          // 6: order.UpdateRequest
	(*UpsertRequest)(nil),          // 7: order.UpsertRequest
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),  // 9: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil), // 10: google.protobuf.DoubleValue
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*typespb.Customer)(nil),       // 12: typespb.Customer
	(*emptypb.Empty)(nil),          // 13: google.protobuf.Empty
	(*typespb.Employee)(nil),       // 14: typespb.Employee
	(*typespb.Order)(nil),          // 15: typespb.Order
	(*typespb.Shipper)(nil),        // 16: typespb.Shipper
}
var file_order_proto_depIdxs = []int32{
	8,  // 0: order.CustomerRequest.CustomerID:type_name -> google.protobuf.StringValue
	9,  // 1: order.EmployeeRequest.EmployeeID:type_name -> google.protobuf.Int64Value
	8,  // 2: order.InsertRequest.CustomerID:type_name -> google.protobuf.StringValue
	9,  // 3: order.InsertRequest.EmployeeID:type_name -> google.protobuf.Int64Value
	10, // 4: order.InsertRequest.Freight:type_name -> google.protobuf.DoubleValue
	11, // 5: order.InsertRequest.OrderDate:type_name -> google.protobuf.Timestamp
	11, // 6: order.InsertRequest.RequiredDate:type_name -> google.protobuf.Timestamp
	8,  // 7: order.InsertRequest.ShipAddress:type_name -> google.protobuf.StringValue
	8,  // 8: order.InsertRequest.ShipCity:type_name -> google.protobuf.StringValue
	8,  // 9: order.InsertRequest.ShipCountry:type_name -> google.protobuf.StringValue
	8,  // 10: order.InsertRequest.ShipName:type_name -> google.protobuf.StringValue
	8,  // 11: order.InsertRequest.ShipPostalCode:type_name -> google.protobuf.StringValue
	8,  // 12: order.InsertRequest.ShipRegion:type_name -> google.protobuf.StringValue
	9,  // 13: order.InsertRequest.ShipVia:type_name -> google.protobuf.Int64Value
	11, // 14: order.InsertRequest.ShippedDate:type_name -> google.protobuf.Timestamp
	9,  // 15: order.ShipperRequest.ShipVia:type_name -> google.protobuf.Int64Value
	8,  // 16: order.UpdateRequest.CustomerID:type_name -> google.protobuf.StringValue
	9,  // 17: order.UpdateRequest.EmployeeID:type_name -> google.protobuf.Int64Value
	10, // 18: order.UpdateRequest.Freight:type_name -> google.protobuf.DoubleValue
	11, // 19: order.UpdateRequest.OrderDate:type_name -> google.protobuf.Timestamp
	11, // 20: order.UpdateRequest.RequiredDate:type_name -> google.protobuf.Timestamp
	8,  // 21: order.UpdateRequest.ShipAddress:type_name -> google.protobuf.StringValue
	8,  // 22: order.UpdateRequest.ShipCity:type_name -> google.protobuf.StringValue
	8,  // 23: order.UpdateRequest.ShipCountry:type_name -> google.protobuf.StringValue
	8,  // 24: order.UpdateRequest.ShipName:type_name -> google.protobuf.StringValue
	8,  // 25: order.UpdateRequest.ShipPostalCode:type_name -> google.protobuf.StringValue
	8,  // 26: order.UpdateRequest.ShipRegion:type_name -> google.protobuf.StringValue
	9,  // 27: order.UpdateRequest.ShipVia:type_name -> google.protobuf.Int64Value
	11, // 28: order.UpdateRequest.ShippedDate:type_name -> google.protobuf.Timestamp
	8,  // 29: order.UpsertRequest.CustomerID:type_name -> google.protobuf.StringValue
	9,  // 30: order.UpsertRequest.EmployeeID:type_name -> google.protobuf.Int64Value
	10, // 31: order.UpsertRequest.Freight:type_name -> google.protobuf.DoubleValue
	11, // 32: order.UpsertRequest.OrderDate:type_name -> google.protobuf.Timestamp
	11, // 33: order.UpsertRequest.RequiredDate:type_name -> google.protobuf.Timestamp
	8,  // 34: order.UpsertRequest.ShipAddress:type_name -> google.protobuf.StringValue
	8,  // 35: order.UpsertRequest.ShipCity:type_name -> google.protobuf.StringValue
	8,  // 36: order.UpsertRequest.ShipCountry:type_name -> google.protobuf.StringValue
	8,  // 37: order.UpsertRequest.ShipName:type_name -> google.protobuf.StringValue
	8,  // 38: order.UpsertRequest.ShipPostalCode:type_name -> google.protobuf.StringValue
	8,  // 39: order.UpsertRequest.ShipRegion:type_name -> google.protobuf.StringValue
	9,  // 40: order.UpsertRequest.ShipVia:type_name -> google.protobuf.Int64Value
	11, // 41: order.UpsertRequest.ShippedDate:type_name -> google.protobuf.Timestamp
	0,  // 42: order.Order.Customer:input_type -> order.CustomerRequest
	1,  // 43: order.Order.Delete:input_type -> order.DeleteRequest
	2,  // 44: order.Order.Employee:input_type -> order.EmployeeRequest
	3,  // 45: order.Order.Insert:input_type -> order.InsertRequest
	4,  // 46: order.Order.OrderByOrderID:input_type -> order.OrderByOrderIDRequest
	5,  // 47: order.Order.Shipper:input_type -> order.ShipperRequest
	6,  // 48: order.Order.Update:input_type -> order.UpdateRequest
	7,  // 49: order.Order.Upsert:input_type -> order.UpsertRequest
	12, // 50: order.Order.Customer:output_type -> typespb.Customer
	13, // 51: order.Order.Delete:output_type -> google.protobuf.Empty
	14, // 52: order.Order.Employee:output_type -> typespb.Employee
	13, // 53: order.Order.Insert:output_type -> google.protobuf.Empty
	15, // 54: order.Order.OrderByOrderID:output_type -> typespb.Order
	16, // 55: order.Order.Shipper:output_type -> typespb.Shipper
	13, // 56: order.Order.Update:output_type -> google.protobuf.Empty
	13, // 57: order.Order.Upsert:output_type -> google.protobuf.Empty
	50, // [50:58] is the sub-list for method output_type
	42, // [42:50] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmployeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderByOrderIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShipperRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
