// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package territory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	typespb "northwind/proto/typespb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TerritoryClient is the client API for Territory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerritoryClient interface {
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Region(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*typespb.Region, error)
	TerritoryByTerritoryID(ctx context.Context, in *TerritoryByTerritoryIDRequest, opts ...grpc.CallOption) (*typespb.Territory, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type territoryClient struct {
	cc grpc.ClientConnInterface
}

func NewTerritoryClient(cc grpc.ClientConnInterface) TerritoryClient {
	return &territoryClient{cc}
}

func (c *territoryClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/territory.Territory/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *territoryClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/territory.Territory/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *territoryClient) Region(ctx context.Context, in *RegionRequest, opts ...grpc.CallOption) (*typespb.Region, error) {
	out := new(typespb.Region)
	err := c.cc.Invoke(ctx, "/territory.Territory/Region", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *territoryClient) TerritoryByTerritoryID(ctx context.Context, in *TerritoryByTerritoryIDRequest, opts ...grpc.CallOption) (*typespb.Territory, error) {
	out := new(typespb.Territory)
	err := c.cc.Invoke(ctx, "/territory.Territory/TerritoryByTerritoryID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *territoryClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/territory.Territory/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *territoryClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/territory.Territory/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerritoryServer is the server API for Territory service.
// All implementations must embed UnimplementedTerritoryServer
// for forward compatibility
type TerritoryServer interface {
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	Insert(context.Context, *InsertRequest) (*emptypb.Empty, error)
	Region(context.Context, *RegionRequest) (*typespb.Region, error)
	TerritoryByTerritoryID(context.Context, *TerritoryByTerritoryIDRequest) (*typespb.Territory, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTerritoryServer()
}

// UnimplementedTerritoryServer must be embedded to have forward compatible implementations.
type UnimplementedTerritoryServer struct {
}

func (UnimplementedTerritoryServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTerritoryServer) Insert(context.Context, *InsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedTerritoryServer) Region(context.Context, *RegionRequest) (*typespb.Region, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Region not implemented")
}
func (UnimplementedTerritoryServer) TerritoryByTerritoryID(context.Context, *TerritoryByTerritoryIDRequest) (*typespb.Territory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerritoryByTerritoryID not implemented")
}
func (UnimplementedTerritoryServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTerritoryServer) Upsert(context.Context, *UpsertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedTerritoryServer) mustEmbedUnimplementedTerritoryServer() {}

// UnsafeTerritoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerritoryServer will
// result in compilation errors.
type UnsafeTerritoryServer interface {
	mustEmbedUnimplementedTerritoryServer()
}

func RegisterTerritoryServer(s grpc.ServiceRegistrar, srv TerritoryServer) {
	s.RegisterService(&Territory_ServiceDesc, srv)
}

func _Territory_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerritoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/territory.Territory/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerritoryServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Territory_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerritoryServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/territory.Territory/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerritoryServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Territory_Region_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerritoryServer).Region(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/territory.Territory/Region",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerritoryServer).Region(ctx, req.(*RegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Territory_TerritoryByTerritoryID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerritoryByTerritoryIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerritoryServer).TerritoryByTerritoryID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/territory.Territory/TerritoryByTerritoryID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerritoryServer).TerritoryByTerritoryID(ctx, req.(*TerritoryByTerritoryIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Territory_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerritoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/territory.Territory/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerritoryServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Territory_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerritoryServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/territory.Territory/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerritoryServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Territory_ServiceDesc is the grpc.ServiceDesc for Territory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Territory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "territory.Territory",
	HandlerType: (*TerritoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Territory_Delete_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Territory_Insert_Handler,
		},
		{
			MethodName: "Region",
			Handler:    _Territory_Region_Handler,
		},
		{
			MethodName: "TerritoryByTerritoryID",
			Handler:    _Territory_TerritoryByTerritoryID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Territory_Update_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _Territory_Upsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "territory.proto",
}
