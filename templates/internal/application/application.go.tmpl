package application

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"net"

	"github.com/google/uuid"
	"google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/timestamppb"
	"google.golang.org/protobuf/types/known/wrapperspb"

	pb "{{ .GoModule}}/proto/{{.Package | SnakeCase}}"
	typespb "{{ .GoModule}}/proto/typespb"
	{{.SrcPackage}} "{{.GoModule}}/{{.SrcPath}}"
	"{{.GoModule}}/internal/validation"
)
	
type {{.Package | UpperFirst}}Service struct {
    pb.Unimplemented{{.Package | UpperFirst}}Server
	db *sql.DB
}
	
func New{{.Package | UpperFirst}}Service(db *sql.DB) *{{.Package | UpperFirst}}Service {
	return &{{.Package | UpperFirst}}Service{db: db}
}
{{$package := .Package}}{{$srcPackage := .SrcPackage}}{{ range .Services }}
func (s *{{$package | UpperFirst}}Service) {{.Name}}(ctx context.Context, req *{{.MethodInputType}}) (res *{{.MethodOutputType}}, err error) {
    {{- if and (or (eq .Name "Delete") (eq .Name "Update")) (.PKJoin "") (.IsMethod) -}}
	m, err := {{$srcPackage}}.{{$package | UpperFirst}}By{{.PKJoin ""}}(ctx, s.db, {{.PKParams "req."}})
	if err != nil {
		return
	}
	{{else}}
    {{if .IsMethod}}var m {{$srcPackage}}.{{$package}}{{end}}
	{{ range .InputGrpc}}{{ .}}
	{{end}}{{end}}{{if and (eq .Name "Update") (.PKJoin "") (.IsMethod)}}{{range .InputGrpc}}{{ .}}
	{{end}}{{end}}
	{{ .ReturnCallDatabase}} err {{if not .EmptyOutput}}:{{end}}= {{if .IsMethod}}m{{else}}{{$srcPackage}}{{end}}.{{ .Name}}({{if .HasContext}}ctx, {{end}}s.db{{ .ParamsCallDatabase}})
	if err != nil {			
		return
	}

	res = new({{.MethodOutputType}})
	{{ range .OutputGrpc}}{{ .}}		
	{{end}}
	{{if eq .Name "Insert"}}{{if .SimplePK}}
	err = sendResourceLocation(ctx, fmt.Sprintf("/%v", m.{{.SimplePK}}))
	{{else}}
	err = sendResourceLocation(ctx, fmt.Sprintf("?{{ .PKJoin "=%v&"}}=%v", m.{{.PKJoin ", m."}}))
	{{end -}}
	{{end}}
	return
}
{{ end }}